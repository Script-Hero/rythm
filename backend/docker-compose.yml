services:
  # Infrastructure Services
  kafka:
    image: bitnami/kafka:3.7
    container_name: algotrade-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - algotrade
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: algotrade-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - algotrade
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: algotrade-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: algotrade
      POSTGRES_USER: algotrade
      POSTGRES_PASSWORD: algotrade_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - algotrade
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U algotrade -d algotrade"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Microservices
  auth-service:
    build: ./services/auth-service
    container_name: algotrade-auth
    ports:
      - "8007:8007"
    environment:
      DATABASE_URL: postgresql://algotrade:algotrade_pass@postgres:5432/algotrade
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-1440}
      DEV_MODE: ${DEV_MODE:-true}
      DEBUG: ${DEBUG:-true}
    volumes:
      - ./services/auth-service/app:/app/app
      - ./shared:/app/shared:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algotrade
    restart: unless-stopped
  api-gateway:
    build: ./services/api-gateway
    container_name: algotrade-api-gateway
    ports:
      - "8000:8000"
    environment:
      DEBUG: "true"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      POSTGRES_URL: "postgresql://algotrade:algotrade_pass@postgres:5432/algotrade"
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-1440}
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - algotrade
    volumes:
      - ./shared:/app/shared:ro
    restart: unless-stopped

  market-data-service:
    build: ./services/market-data-service
    container_name: algotrade-market-data
    ports:
      - "8001:8001"
    environment:
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      COINBASE_WS_URL: "wss://ws-feed.exchange.coinbase.com"
      FINNHUB_TOKEN: "${FINNHUB_TOKEN}"
      COINBASE_API_KEY: "${COINBASE_API_KEY}"
      COINBASE_API_SECRET: "${COINBASE_API_SECRET}"
      COINBASE_PASSPHRASE: "${COINBASE_PASSPHRASE}"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - algotrade
    volumes:
      - ./shared:/app/shared:ro
    restart: unless-stopped

  strategy-service:
    build: ./services/strategy-service
    container_name: algotrade-strategy
    ports:
      - "8002:8002"
    environment:
      DATABASE_URL: "postgresql://algotrade:algotrade_pass@postgres:5432/algotrade"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - algotrade
    volumes:
      - ./shared/strategy_engine:/app/strategy_engine
      - ./shared:/app/shared:ro
    restart: unless-stopped

  forward-test-service:
    build: ./services/forward-test-service
    container_name: algotrade-forward-test
    ports:
      - "8003:8003"
    environment:
      DATABASE_URL: "postgresql://algotrade:algotrade_pass@postgres:5432/algotrade"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - algotrade
    volumes:
      - ./shared:/app/shared:ro
    restart: unless-stopped

  backtesting-service:
    build: ./services/backtesting-service
    container_name: algotrade-backtesting
    ports:
      - "8004:8004"
    environment:
      DATABASE_URL: "postgresql://algotrade:algotrade_pass@postgres:5432/algotrade"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      AUTH_SERVICE_URL: "http://auth-service:8007"
      S3_ENDPOINT: "${S3_ENDPOINT}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      S3_SECRET_KEY: "${S3_SECRET_KEY}"
      S3_BUCKET: "${S3_BUCKET}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - algotrade
    volumes:
      - ./shared/strategy_engine:/app/strategy_engine
      - ./shared:/app/shared:ro
    restart: unless-stopped

  notification-service:
    build: ./services/notification-service
    container_name: algotrade-notification
    ports:
      - "8005:8005"
    environment:
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - algotrade
    volumes:
      - ./shared:/app/shared:ro
    restart: unless-stopped

  analytics-service:
    build: ./services/analytics-service
    container_name: algotrade-analytics
    ports:
      - "8006:8006"
    environment:
      DATABASE_URL: "postgresql+psycopg_async://algotrade:algotrade_pass@postgres:5432/algotrade"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      S3_ENDPOINT: "${S3_ENDPOINT}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      S3_SECRET_KEY: "${S3_SECRET_KEY}"
      S3_BUCKET: "${S3_BUCKET}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - algotrade
    volumes:
      - ./shared:/app/shared:ro
    restart: unless-stopped

networks:
  algotrade:
    driver: bridge

volumes:
  kafka_data:
  redis_data:
  postgres_data: